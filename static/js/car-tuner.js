function(){ if (window.__carTunerInstalled) return; window.__carTunerInstalled = true; const css = "\n #carTunerBtn { position: fixed; right: 12px; top: 12px; z-index:99999;\n background:#222;color:#fff;padding:8px 10px;border-radius:6px;border:none;cursor:pointer;opacity:0.9 }\n #carTunerPanel { position: fixed; right: 12px; top: 56px; z-index:99999;\n width:340px; background: rgba(20,20,20,0.95); color:#fff; padding:12px; border-radius:8px;\n box-shadow:0 6px 18px rgba(0,0,0,0.6); font-family:Arial,Helvetica,sans-serif; font-size:13px }\n #carTunerPanel h3{ margin:0 0 8px 0; font-size:14px }\n .ct-row{ display:flex; align-items:center; margin:6px 0 }\n .ct-label{ width:120px; color:#ddd }\n .ct-input{ flex:1 }\n .ct-value{ width:48px; text-align:right; margin-left:8px; color:#9ff }\n .ct-note{ color:#bbb; font-size:12px; margin-top:8px }\n .ct-btn{ margin-top:10px; background:#2a7; color:#012; padding:6px 8px; border-radius:6px; border:none; cursor:pointer }\n "; const style = document.createElement('style'); style.textContent = css; document.head.appendChild(style); const btn = document.createElement('button'); btn.id = 'carTunerBtn'; btn.innerText = 'TUNE'; document.body.appendChild(btn); const panel = document.createElement('div'); panel.id = 'carTunerPanel'; panel.style.display = 'none'; panel.innerHTML = '<h3>Car Tuner — Current car</h3><div id="ct-form"></div><div class="ct-note">Auto-applies live. If values don\'t change, the game uses different property names/structures — open console for debug functions.</div><button id="ct-reset" class="ct-btn">Reset to defaults</button>'; document.body.appendChild(panel); btn.addEventListener('click', ()=> panel.style.display = panel.style.display === 'none' ? 'block' : 'none'); const ATTRS = { accel: {min:2, max:2000, step:1, label:'Accel'}, reverse: {min:1, max:300, step:1, label:'Reverse'}, brake: {min:1, max:200, step:1, label:'Brake'}, steerAccel:{min:1, max:50, step:0.1, label:'Steer Accel'}, topSpeed: {min:100, max:50000, step:1, label:'Top Speed'}, aeroFactor:{min:0.1, max:2, step:0.01,label:'Aero Factor'} }; const form = panel.querySelector('#ct-form'); const inputs = {}; Object.keys(ATTRS).forEach(key=>{ const def = ATTRS[key]; const row = document.createElement('div'); row.className='ct-row'; const label = document.createElement('div'); label.className='ct-label'; label.innerText = def.label; const input = document.createElement('input'); input.className='ct-input'; input.type='range'; input.min = def.min; input.max = def.max; input.step = def.step; input.value = def.min; const val = document.createElement('div'); val.className='ct-value'; val.innerText = input.value; row.appendChild(label); row.appendChild(input); row.appendChild(val); form.appendChild(row); inputs[key] = {input, val, def}; input.addEventListener('input', ()=> { val.innerText = input.value; applyToCurrentCar(); }); }); panel.querySelector('#ct-reset').addEventListener('click', ()=>{ Object.values(inputs).forEach(({input,def}) => { input.value = def.min; input.dispatchEvent(new Event('input')); }); }); function findLikelyCar() { const tryNames = ['player','playerCar','car','vehicle','veh','playerVehicle','game','app']; for (const n of tryNames) { try { const obj = window[n]; if (isCarLike(obj)) return obj; } catch(e){} } try { if (window.game && window.game.player && isCarLike(window.game.player)) return window.game.player; if (window.game && window.game.player && window.game.player.car && isCarLike(window.game.player.car)) return window.game.player.car; if (window.app && window.app.player && isCarLike(window.app.player)) return window.app.player; } catch(e){} const keys = Object.keys(window); for (let i=0;i<keys.length;i++){ const k = keys[i]; try { const v = window[k]; if (isCarLike(v)) return v; } catch(e){} } return null; } function isCarLike(o) { if (!o || typeof o !== 'object') return false; const nameHints = ['accel','acc','brake','top','speed','aero','steer','reverse','maxSpeed']; const keys = Object.keys(o); for (const k of keys) { const kl = k.toLowerCase(); for (const h of nameHints) { if (kl.indexOf(h) !== -1) { if (typeof o[k] === 'number') return true; } } } for (const k of keys) { try { const nested = o[k]; if (nested && typeof nested === 'object') { for (const nk of Object.keys(nested)) { const nkl = nk.toLowerCase(); for (const h of nameHints) { if (nkl.indexOf(h) !== -1 && typeof nested[nk] === 'number') return true; } } } } catch(e){} } return false; } const PROP_CANDIDATES = { accel: ['accel','acceleration','acc','engineAccel','power'], reverse: ['reverse','reverseAccel','rev','backAccel','reverseAcceleration'], brake: ['brake','brakes','br','brakeForce','braking'], steerAccel: ['steerAccel','steer_accel','steering','steer','steerAccelRate','steerAcceleration'], topSpeed: ['topSpeed','topspeed','maxSpeed','maxspeed','top','max_velocity','maxVel'], aeroFactor: ['aeroFactor','aero','drag','dragFactor','aerofactor'] }; function setAttrOnObject(obj, candNames, value) { if (!obj || typeof obj !== 'object') return false; for (const name of candNames) { if (Object.prototype.hasOwnProperty.call(obj, name) && typeof obj[name] === 'number') { obj[name] = castNumber(value, obj[name]); return true; } if (Object.prototype.hasOwnProperty.call(obj, name)) { try { obj[name] = castNumber(value, obj[name]); return true; } catch(e){} } } for (const k of Object.keys(obj)) { try { const nested = obj[k]; if (nested && typeof nested === 'object') { for (const name of candNames) { if (Object.prototype.hasOwnProperty.call(nested, name)) { nested[name] = castNumber(value, nested[name]); return true; } } } } catch(e){} } return false; } function castNumber(val, sample) { if (typeof sample === 'number') { return sample % 1 === 0 ? Math.round(Number(val)) : Number(val); } return Number(val); } function applyAttributesToCar(car, attrs) { if (!car) return false; let any = false; for (const k of Object.keys(attrs)) { const resp = setAttrOnObject(car, PROP_CANDIDATES[k] || [k], attrs[k]); any = any || resp; } return any; } window.__findCar = findLikelyCar; function readSliders() { const out = {}; for (const k of Object.keys(inputs)) { out[k] = Number(inputs[k].input.value); } return out; } function applyToCurrentCar() { const car = findLikelyCar(); if (!car) { if (!panel.querySelector('#ct-hint')) { const h = document.createElement('div'); h.id='ct-hint'; h.style.color='#f88'; h.style.marginTop='8px'; h.innerText = 'Could not locate car object automatically. Open console and run window.__findCar() to inspect.'; panel.appendChild(h); } return false; } const hint = panel.querySelector('#ct-hint'); if (hint) hint.remove(); const attrs = readSliders(); const applied = applyAttributesToCar(car, attrs); try { if (!applied) { for (const k of Object.keys(car)) { const nested = car[k]; if (nested && typeof nested === 'object') { const ok = applyAttributesToCar(nested, attrs); if (ok) { break; } } } } } catch(e){} return true; } function refreshUIFromCar() { const car = findLikelyCar(); if (!car) return; for (const k of Object.keys(inputs)) { const candidates = PROP_CANDIDATES[k]; let found = false; for (const name of candidates) { if (car && Object.prototype.hasOwnProperty.call(car, name) && typeof car[name] === 'number') { inputs[k].input.value = car[name]; inputs[k].val.innerText = car[name]; found = true; break; } } if (!found) { for (const nk of Object.keys(car)) { try { const nested = car[nk]; if (nested && typeof nested === 'object') { for (const name of candidates) { if (Object.prototype.hasOwnProperty.call(nested, name) && typeof nested[name] === 'number') { inputs[k].input.value = nested[name]; inputs[k].val.innerText = nested[name]; found = true; break; } } } if (found) break; } catch(e){} } } } } setTimeout(()=> { refreshUIFromCar(); }, 1500); const autoApplyInterval = setInterval(()=> { applyToCurrentCar(); refreshUIFromCar(); }, 800); window.addEventListener('beforeunload', ()=> { clearInterval(autoApplyInterval); }); window.__carTuner = { applyNow: applyToCurrentCar, findCar: findLikelyCar, inputs: inputs, ATTRS: ATTRS }; console.info('[Car Tuner] installed. Click TUNE. Debug helpers: window.__findCar(), window.__carTuner'); })();
